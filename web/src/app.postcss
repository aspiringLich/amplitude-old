/* Write your global styles here, in PostCSS syntax */
@font-face {
    font-family: "Noto Sans";
    src: url("$assets/fonts/NotoSans-Regular.ttf");
}

@font-face {
    font-family: "Fira Code";
    src: url("$assets/fonts/FiraCode-Regular.ttf");
}

@font-face {
    font-family: "Jet Brains Mono";
    src: url("$assets/fonts/JetBrainsMonoNL-Regular.ttf");
}

html,
body {
    @apply h-full overflow-hidden;
}

body {
    font-family: "Noto Sans";
}

@keyframes rotate {
	from {
		transform: rotate(0deg);
	}
	to {
		transform: rotate(360deg);
	}
}

body::before {
    content: "";
    position: absolute;
    width: 200vw;
    height: 200vh;
    top: -50%;
    left: -50%;
    z-index: -1;
	
	animation: 200s rotate infinite linear;
	
    background-image: radial-gradient(
            at 0% 0%,
            rgba(var(--color-secondary-500) / 0.33) 0px,
            transparent 50%
        ),
        radial-gradient(
            at 50% 100%,
            rgba(var(--color-primary-500) / 0.33) 0px,
            transparent 50%
        ),
        radial-gradient(
            at 98% 1%,
            rgba(var(--color-tertiary-500) / 0.33) 0px,
            transparent 50%
        );
}

p {
    @apply my-2 leading-7;
}

h1,
h2,
h3,
h4,
h5,
h6 {
    font-family: "Fira Code";
    line-height: 1.5;
    @apply my-2 font-bold;
}

code:not(.nglobal) {
    font-family: "Jet Brains Mono";
    line-height: 1.1em;
    font-size: 0.9em;
}

:not(pre) > code:not(.nglobal) {
    background-color: rgb(var(--color-surface-500) / 0.1);
    padding: 0.2em 0.4em;
    border-radius: 0.3em;
}

blockquote {
    margin: 0;

    box-sizing: border-box;
    width: 100%;
    overflow: hidden;
    @apply bg-surface-100 rounded-container-token m-0 py-4 px-6;
}

.splitpanes.theme {
    .splitpanes__pane {
        @apply bg-base rounded-md;
        overflow-y: auto;
    }
    .splitpanes__splitter {
        /* @apply bg-surface-100; */
        box-sizing: border-box;
        position: relative;
        flex-shrink: 0;
        &:before,
        &:after {
            content: "";
            position: absolute;
            top: 50%;
            left: 50%;
            /* transition: background-color 0.3s; */
        }
        &:hover:before,
        &:hover:after {
        }
        &:first-child {
            cursor: auto;
        }
    }
}
.theme {
    &.splitpanes .splitpanes .splitpanes__splitter {
        z-index: 1;
    }
    &.splitpanes--vertical > .splitpanes__splitter,
    .splitpanes--vertical > .splitpanes__splitter {
        width: 0.5em;
        /* border-left: 1px solid #eee; */
        cursor: col-resize;
        &:before,
        &:after {
            transform: translateY(-50%);
            width: 1px;
            height: 30px;
        }
        &:before {
            margin-left: -2px;
        }
        &:after {
            margin-left: 1px;
        }
    }
    &.splitpanes--horizontal > .splitpanes__splitter,
    .splitpanes--horizontal > .splitpanes__splitter {
        height: 7px;
        /* border-top: 1px solid #eee; */
        cursor: row-resize;
        &:before,
        &:after {
            transform: translateX(-50%);
            width: 30px;
            height: 1px;
        }
        &:before {
            margin-top: -2px;
        }
        &:after {
            margin-top: 1px;
        }
    }
}

.interactive:active {
    --tw-scale-x: 95%;
    --tw-scale-y: 95%;
    transform: translate(var(--tw-translate-x), var(--tw-translate-y)) rotate(var(--tw-rotate)) skewX(var(--tw-skew-x)) skewY(var(--tw-skew-y)) scaleX(var(--tw-scale-x)) scaleY(var(--tw-scale-y));
    --tw-brightness: brightness(.9);
    filter: var(--tw-blur) var(--tw-brightness) var(--tw-contrast) var(--tw-grayscale) var(--tw-hue-rotate) var(--tw-invert) var(--tw-saturate) var(--tw-sepia) var(--tw-drop-shadow);
}