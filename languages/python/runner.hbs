from contextlib import redirect_stdout
from io import StringIO
import json
import traceback

import {{code_file}}

tests = {
{{~#each functions~}}
"{{@key}}": [
{{~#each tests~}}
{
"inputs": [
    {{~#each inputs~}}
    {{this}}{{#unless @last}},{{/unless}}
    {{~/each~}}],{{#if hidden}}
"hidden": True,{{/if}}
}{{#unless @last}},{{/unless}}
{{~/each~}}
]{{#unless @last}},{{/unless}}
{{~/each~}}
}

outputs = {}

for [fn, suite] in tests.items():
    assert hasattr({{code_file}}, fn), f"Could not find `{fn}` in `{{code_file}}.py`"
    outputs[fn] = []
    output = outputs[fn]
    fn = getattr({{code_file}}, fn)
    for i, test in enumerate(suite):
        with redirect_stdout(StringIO()) as stdout:
            try:
                out = fn(*test["inputs"])
                output.append({ 
                    "type": "answer",
                    "value": out,
                    "stdout": stdout.getvalue()
                })
            except Exception:
                output.append({
                    "type": "exception",
                    "traceback": traceback.format_exc(),
                    "stdout": stdout.getvalue()
                })

print(json.dumps(outputs))